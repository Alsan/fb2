// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileBrowserRpcServiceClient is the client API for FileBrowserRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileBrowserRpcServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	FileList(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileListReply, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileReply, error)
}

type fileBrowserRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileBrowserRpcServiceClient(cc grpc.ClientConnInterface) FileBrowserRpcServiceClient {
	return &fileBrowserRpcServiceClient{cc}
}

func (c *fileBrowserRpcServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/FileBrowserRpcService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileBrowserRpcServiceClient) FileList(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileListReply, error) {
	out := new(FileListReply)
	err := c.cc.Invoke(ctx, "/FileBrowserRpcService/FileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileBrowserRpcServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error) {
	out := new(UploadFileReply)
	err := c.cc.Invoke(ctx, "/FileBrowserRpcService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileBrowserRpcServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileReply, error) {
	out := new(DownloadFileReply)
	err := c.cc.Invoke(ctx, "/FileBrowserRpcService/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileBrowserRpcServiceServer is the server API for FileBrowserRpcService service.
// All implementations must embed UnimplementedFileBrowserRpcServiceServer
// for forward compatibility
type FileBrowserRpcServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	FileList(context.Context, *FileListRequest) (*FileListReply, error)
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileReply, error)
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileReply, error)
	mustEmbedUnimplementedFileBrowserRpcServiceServer()
}

// UnimplementedFileBrowserRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileBrowserRpcServiceServer struct {
}

func (UnimplementedFileBrowserRpcServiceServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedFileBrowserRpcServiceServer) FileList(context.Context, *FileListRequest) (*FileListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileList not implemented")
}
func (UnimplementedFileBrowserRpcServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileBrowserRpcServiceServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileBrowserRpcServiceServer) mustEmbedUnimplementedFileBrowserRpcServiceServer() {}

// UnsafeFileBrowserRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileBrowserRpcServiceServer will
// result in compilation errors.
type UnsafeFileBrowserRpcServiceServer interface {
	mustEmbedUnimplementedFileBrowserRpcServiceServer()
}

func RegisterFileBrowserRpcServiceServer(s grpc.ServiceRegistrar, srv FileBrowserRpcServiceServer) {
	s.RegisterService(&FileBrowserRpcService_ServiceDesc, srv)
}

func _FileBrowserRpcService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileBrowserRpcServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileBrowserRpcService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileBrowserRpcServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileBrowserRpcService_FileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileBrowserRpcServiceServer).FileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileBrowserRpcService/FileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileBrowserRpcServiceServer).FileList(ctx, req.(*FileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileBrowserRpcService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileBrowserRpcServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileBrowserRpcService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileBrowserRpcServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileBrowserRpcService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileBrowserRpcServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileBrowserRpcService/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileBrowserRpcServiceServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileBrowserRpcService_ServiceDesc is the grpc.ServiceDesc for FileBrowserRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileBrowserRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileBrowserRpcService",
	HandlerType: (*FileBrowserRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _FileBrowserRpcService_Login_Handler,
		},
		{
			MethodName: "FileList",
			Handler:    _FileBrowserRpcService_FileList_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _FileBrowserRpcService_UploadFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _FileBrowserRpcService_DownloadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filebrowser.proto",
}
